{"version":3,"file":"static/js/21.e501e9da.chunk.js","mappings":"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","sources":["../node_modules/@ant-design/icons-svg/es/asn/EyeTwoTone.js","../node_modules/@ant-design/icons/es/icons/EyeTwoTone.js","webpack://gsn/./src/components/Login/Login.module.css?3530","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"sourcesContent":["// This icon file is generated automatically.\nvar EyeTwoTone = { \"icon\": function render(primaryColor, secondaryColor) { return { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M81.8 537.8a60.3 60.3 0 010-51.5C176.6 286.5 319.8 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c-192.1 0-335.4-100.5-430.2-300.2z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M512 258c-161.3 0-279.4 81.8-362.7 254C232.6 684.2 350.7 766 512 766c161.4 0 279.5-81.8 362.7-254C791.4 339.8 673.3 258 512 258zm-4 430c-97.2 0-176-78.8-176-176s78.8-176 176-176 176 78.8 176 176-78.8 176-176 176z\", \"fill\": secondaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M942.2 486.2C847.4 286.5 704.1 186 512 186c-192.2 0-335.4 100.5-430.2 300.3a60.3 60.3 0 000 51.5C176.6 737.5 319.9 838 512 838c192.2 0 335.4-100.5 430.2-300.3 7.7-16.2 7.7-35 0-51.5zM512 766c-161.3 0-279.4-81.8-362.7-254C232.6 339.8 350.7 258 512 258s279.4 81.8 362.7 254C791.5 684.2 673.4 766 512 766z\", \"fill\": primaryColor } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M508 336c-97.2 0-176 78.8-176 176s78.8 176 176 176 176-78.8 176-176-78.8-176-176-176zm0 288c-61.9 0-112-50.1-112-112s50.1-112 112-112 112 50.1 112 112-50.1 112-112 112z\", \"fill\": primaryColor } }] }; }, \"name\": \"eye\", \"theme\": \"twotone\" };\nexport default EyeTwoTone;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport EyeTwoToneSvg from \"@ant-design/icons-svg/es/asn/EyeTwoTone\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar EyeTwoTone = function EyeTwoTone(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: EyeTwoToneSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  EyeTwoTone.displayName = 'EyeTwoTone';\n}\nexport default /*#__PURE__*/React.forwardRef(EyeTwoTone);","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Login_error__SwKKY\",\"visible\":\"Login_visible__Y0utM\",\"hidden\":\"Login_hidden__fxqZL\"};","import {FC, useEffect, useState} from \"react\"\r\nimport {Controller, SubmitHandler, useForm, UseFormSetError} from \"react-hook-form\"\r\nimport {Button, Checkbox, Form, Input, Typography} from \"antd\"\r\nimport Preloader from \"../common/Preloader/Preloader\"\r\nimport {EyeInvisibleOutlined, EyeTwoTone, LoadingOutlined} from \"@ant-design/icons\"\r\nimport * as React from \"react\"\r\nimport s from \"./Login.module.css\"\r\n\r\nconst {Item} = Form\r\nconst {Text} = Typography\r\n\r\n\r\ntype LoginFormPropsType = {\r\n    captcha: string\r\n    isFetching: boolean\r\n    logIn: (\r\n        formData: FormValues,\r\n        setError: UseFormSetError<FormValues>,\r\n        setIsLoading: (value: boolean) => void\r\n    ) => void\r\n}\r\n\r\nexport type FormValues = {\r\n    serverResponse?: string[]\r\n    email: string\r\n    password: string\r\n    captcha: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: FC<LoginFormPropsType> = ({logIn, captcha, isFetching}) => {\r\n    const {\r\n        handleSubmit,\r\n        setError,\r\n        clearErrors,\r\n        control,\r\n        formState: {\r\n            errors\r\n        }\r\n    } = useForm<FormValues>({\r\n        defaultValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n            captcha: \"\",\r\n            rememberMe: false\r\n        }\r\n    })\r\n\r\n    const [form] = Form.useForm()\r\n    const rules = {required: true}\r\n    const [isLoading, setIsLoading] = useState(false)\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = (formData) => {\r\n        logIn(formData, setError, setIsLoading)\r\n    }\r\n\r\n    const clearErrorsForm = () => {\r\n        if (errors && errors.serverResponse && errors.serverResponse.message!.length > 0) {\r\n            clearErrors(\"serverResponse\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                gap: \"16px\",\r\n                width: \"200px\"\r\n            }}\r\n            onFinish={handleSubmit(onSubmit)}\r\n            form={form}\r\n        >\r\n            <Item\r\n                validateStatus={errors?.serverResponse?.message ? \"error\" : \"\"}\r\n            >\r\n                <Controller\r\n                    name={\"email\"}\r\n                    control={control}\r\n                    rules={rules}\r\n                    render={({field}) =>\r\n                        <Input\r\n                            placeholder={\"Email\"}\r\n                            {...field}\r\n                            onFocus={clearErrorsForm}\r\n                        />\r\n                    }\r\n                />\r\n            </Item>\r\n            <Item\r\n                validateStatus={errors?.serverResponse?.message ? \"error\" : \"\"}\r\n            >\r\n                <Controller\r\n                    rules={rules}\r\n                    name={\"password\"}\r\n                    control={control}\r\n                    render={({field}) =>\r\n                        <Input.Password\r\n                            iconRender={(visible) => (visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />)}\r\n                            placeholder={\"Password\"}\r\n                            {...field}\r\n                            onFocus={clearErrorsForm}\r\n                        />\r\n                    }\r\n                />\r\n            </Item>\r\n            <Text\r\n                className={s.error}\r\n            >\r\n                {\r\n                    errors?.serverResponse?.message\r\n                }\r\n            </Text>\r\n            <Item>\r\n                <Controller\r\n                    name=\"rememberMe\"\r\n                    control={control}\r\n                    render={({field}) =>\r\n                        <Checkbox\r\n                            {...field}\r\n                        >\r\n                            Remember Me\r\n                        </Checkbox>\r\n                    }\r\n                />\r\n            </Item>\r\n            {\r\n                captcha\r\n                    ? <Item>\r\n                        <img src={captcha} alt=\"captcha\"/>\r\n                        <Controller\r\n                            rules={rules}\r\n                            name=\"captcha\"\r\n                            control={control}\r\n                            render={({field}) =>\r\n                                <Input\r\n                                    {...field}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Item>\r\n                    : <></>\r\n            }\r\n            <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n\r\n                style={{\r\n                    width: \"100%\"\r\n                }}\r\n                disabled={isLoading}\r\n            >\r\n                {\r\n                    isLoading\r\n                        ? <LoadingOutlined style={{ fontSize: 14 }} spin />\r\n                        : \"Login\"\r\n                }\r\n            </Button>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import {UseFormSetError} from \"react-hook-form\"\nimport {InitialAuthStateType, logIn} from \"../../redux/auth-reducer\"\nimport {connect} from \"react-redux\"\nimport * as React from \"react\"\nimport {FC} from \"react\"\nimport {Navigate} from \"react-router-dom\"\nimport {AppStateType} from \"../../redux/redux-store\"\nimport {Form, Typography} from \"antd\"\nimport LoginForm from \"./LoginForm\"\n\nconst {Title} = Typography\n\nexport type FormValues = {\n    serverResponse?: string[]\n    email: string\n    password: string\n    captcha: string\n    rememberMe: boolean\n}\n\ntype LoginPropsType = {\n    auth: InitialAuthStateType\n}\n\ntype LoginDispatchType = {\n    logIn: (\n        formData: FormValues,\n        setError: UseFormSetError<FormValues>,\n        setIsLoading: (value: boolean) => void\n    ) => void\n}\n\ntype LoginPropsAndDispatchType = LoginPropsType & LoginDispatchType\n\nconst Login: FC<LoginPropsAndDispatchType> = ({auth, logIn}) => {\n    return <div>\n        {\n            !auth.isAuth\n                ? <div\n                    style={{\n                        display: \"flex\",\n                        alignItems: \"center\",\n                        flexDirection: \"column\",\n                        textAlign: \"center\"\n                    }}\n                >\n                    <Title\n                        level={3}\n                        style={{marginTop: \"60px\"}}\n                    >\n                        LOGIN\n                    </Title>\n                    <br/>\n                    <br/>\n                    <LoginForm\n                        logIn={logIn}\n                        captcha={auth.captcha}\n                        isFetching={auth.isFetching}\n                    />\n                </div>\n                : <Navigate to=\"/profile\"/>\n        }\n    </div>\n}\n\nlet mapStateToProps = (state: AppStateType): LoginPropsType => ({\n        auth: state.auth\n    }\n)\n\nexport default connect<\n    LoginPropsType,\n    LoginDispatchType,\n    {},\n    AppStateType\n    >(mapStateToProps, {logIn})(Login)"],"names":["primaryColor","secondaryColor","EyeTwoTone","props","ref","React","AntdIcon","_extends","icon","EyeTwoToneSvg","Item","Form","Text","Typography","_ref","_errors$serverRespons","_errors$serverRespons2","_errors$serverRespons3","logIn","captcha","_useForm","isFetching","useForm","defaultValues","email","password","rememberMe","handleSubmit","setError","clearErrors","control","errors","formState","_Form$useForm","form","_slicedToArray","rules","required","_useState","useState","_useState2","isLoading","setIsLoading","clearErrorsForm","serverResponse","message","length","_jsxs","style","display","flexDirection","gap","width","onFinish","formData","children","_jsx","validateStatus","Controller","name","render","_ref2","field","Input","_objectSpread","placeholder","onFocus","_ref3","Password","iconRender","visible","EyeInvisibleOutlined","className","s","_ref4","Checkbox","src","alt","_ref5","_Fragment","Button","type","htmlType","disabled","LoadingOutlined","fontSize","spin","Title","connect","state","auth","isAuth","Navigate","to","alignItems","textAlign","level","marginTop","LoginForm"],"sourceRoot":""}