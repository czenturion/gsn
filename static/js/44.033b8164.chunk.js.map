{"version":3,"file":"static/js/44.033b8164.chunk.js","mappings":"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","sources":["webpack://gsn/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/Errors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"logFormInput\":\"Login_logFormInput__YmWHv\",\"logForm\":\"Login_logForm__-5Xrv\",\"logInput\":\"Login_logInput__toAZI\",\"rememberMe\":\"Login_rememberMe__pzUev\",\"submit\":\"Login_submit__cSdEP\",\"logOutBtn\":\"Login_logOutBtn__R0zIa\",\"errorEmptyString\":\"Login_errorEmptyString__JGP-K\",\"captcha\":\"Login_captcha__+56Kx\"};","import {useForm, UseFormSetError} from \"react-hook-form\"\nimport type {SubmitHandler} from \"react-hook-form\"\nimport {InitialAuthStateType, logIn} from \"../../redux/auth-reducer\"\nimport {connect} from \"react-redux\"\nimport s from \"./Login.module.css\"\nimport {ErrorBorderOutline} from \"../common/FormsControls/Errors\"\nimport * as React from \"react\"\nimport {Navigate} from \"react-router-dom\"\nimport {FC} from \"react\"\nimport {AppStateType} from \"../../redux/redux-store\"\nimport Preloader from \"../common/Preloader/Preloader\"\n\nexport type FormValues = {\n    serverResponse?: string[]\n    email: string\n    password: string\n    captcha: string\n    rememberMe: boolean\n}\n\ntype LoginFormPropsType = {\n    captcha: string\n    isFetching: boolean\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\n}\n\nconst LoginForm: FC<LoginFormPropsType> = ({logIn, captcha, isFetching}) => {\n    const {\n        register,\n        handleSubmit,\n        reset,\n        setError,\n        clearErrors,\n        formState: {\n            errors\n        }\n    } = useForm<FormValues>()\n\n    const onSubmit: SubmitHandler<FormValues> = (formData) => {\n        logIn(formData, setError)\n        reset()\n        return <Navigate to=\"/profile/\"/>\n    }\n\n    const clearErrorsForm = () => {\n        if (errors && errors.serverResponse && errors.serverResponse.message!.length > 0) {\n            clearErrors(\"serverResponse\")\n        }\n    }\n\n    if (isFetching) return <Preloader/>\n\n    return (\n        <form\n            className={s.logForm}\n            onSubmit={handleSubmit(onSubmit)}>\n            <div>\n                <input\n                    className={s.logInput}\n                    style={errors?.email && ErrorBorderOutline(errors)}\n                    {...register(\n                        \"email\",\n                        {\n                            required: true,\n                            onChange: clearErrorsForm\n                        })}\n                    placeholder={\"Email\"}/>\n            </div>\n            <div>\n                <input\n                    className={s.logInput}\n                    style={errors?.password && ErrorBorderOutline(errors)}\n                    {...register(\n                        \"password\",\n                        {\n                            required: true,\n                            onChange: clearErrorsForm\n                        })}\n                    placeholder={\"Password\"}\n                    type={\"password\"}/>\n            </div>\n            <div className={s.rememberMe}>\n                <input\n                    {...register(\"rememberMe\")}\n                    type={\"checkbox\"}/>\n                <p>Remember me</p>\n            </div>\n            <div>\n                {\n                    captcha\n                        ? <div className={s.captcha}>\n                            <img src={captcha} alt=\"captcha\"/>\n                            <input\n                                type=\"text\"\n                                {...register(\"captcha\",\n                                    {required: true})}/>\n                        </div>\n                        : <></>\n                }\n            </div>\n            <div>\n                <input\n                    className={s.submit}\n                    type={\"submit\"}/>\n            </div>\n            <div>\n                {\n                    errors?.serverResponse?.message\n                        ? <p style={{color: \"red\"}}>{errors.serverResponse.message}</p>\n                        : <div className={s.errorEmptyString}/>\n                }\n            </div>\n        </form>\n    )\n}\n\ntype LoginPropsType = {\n    auth: InitialAuthStateType\n}\n\ntype LoginDispatchType = {\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\n}\n\ntype LoginPropsAndDispatchType = LoginPropsType & LoginDispatchType\n\nconst Login: FC<LoginPropsAndDispatchType> = ({auth, logIn}) => {\n    return <>\n        {\n            !auth.isAuth\n                ? <div className={s.logFormInput}>\n                    <h1>LOGIN</h1>\n                    <LoginForm logIn={logIn} captcha={auth.captcha} isFetching={auth.isFetching}/>\n                </div>\n                : <Navigate to=\"/profile\"/>\n        }\n    </>\n}\n\nlet mapStateToProps = (state: AppStateType): LoginPropsType => ({\n        auth: state.auth\n    }\n)\n\nexport default connect<LoginPropsType, LoginDispatchType, {}, AppStateType>(mapStateToProps, {logIn})(Login)","type ReturnedValueType = {\n    border?: string\n    outline?: string\n}\n\nexport const ErrorBorder = (props: any): ReturnedValueType => {\n    return {\n        border: Object.keys(props).length !== 0\n            ? '1px solid red'\n            : ''\n    }\n}\n\nexport const ErrorBorderOutline = (props: any): ReturnedValueType => {\n    return {\n        outline: Object.keys(props).length !== 0\n            ? '1px solid red'\n            : ''\n    }\n}"],"names":["LoginForm","_ref","_errors$serverRespons","logIn","captcha","isFetching","_useForm","useForm","register","handleSubmit","reset","setError","clearErrors","errors","formState","clearErrorsForm","serverResponse","message","length","_jsx","Preloader","_jsxs","className","s","onSubmit","formData","Navigate","to","children","_objectSpread","style","email","ErrorBorderOutline","required","onChange","placeholder","password","type","src","alt","_Fragment","color","connect","state","auth","_ref2","isAuth","ErrorBorder","props","border","Object","keys","outline"],"sourceRoot":""}