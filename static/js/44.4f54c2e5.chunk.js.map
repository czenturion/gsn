{"version":3,"file":"static/js/44.4f54c2e5.chunk.js","mappings":"sLACA,EAA+B,4BAA/B,EAA6P,gCAA7P,EAAuS,uB,uFCahSA,EAASC,EAAAA,EAATD,MAgBDE,EAAoC,SAAHC,GAAsC,IAADC,EAAhCC,EAAKF,EAALE,MAAOC,EAAOH,EAAPG,QAASC,EAAUJ,EAAVI,WACxDC,GAUIC,EAAAA,EAAAA,IAAoB,CACpBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVN,QAAS,GACTO,YAAY,KAdhBC,EAAQN,EAARM,SACAC,EAAYP,EAAZO,aACAC,EAAKR,EAALQ,MACAC,EAAQT,EAARS,SACAC,EAAWV,EAAXU,YACAC,EAAOX,EAAPW,QAEIC,EAAMZ,EADVa,UACID,OAkBFE,EAAkB,WAChBF,GAAUA,EAAOG,gBAAkBH,EAAOG,eAAeC,QAASC,OAAS,GAC3EP,EAAY,iBAEpB,EAEA,OAAIX,GAAmBmB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,KAG7BC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACDC,MAAO,CACHC,QAAS,OACTC,cAAe,SACfC,IAAK,OACLC,UAAW,UAEfC,SAAUpB,GAvB0B,SAACqB,GAIzC,OAHAC,QAAQC,IAAIF,GACZ/B,EAAM+B,EAAUnB,GAChBD,KACOU,EAAAA,EAAAA,KAACa,EAAAA,GAAQ,CAACC,GAAG,aACxB,IAkByCC,SAAA,EACjCf,EAAAA,EAAAA,KAACgB,EAAAA,GAAU,CACPC,KAAM,QACNxB,QAASA,EACTyB,OAAQ,SAAAC,GAAA,IAAEC,EAAKD,EAALC,MAAK,OACXpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACFC,YAAa,SACTH,GAAK,IACTI,QAAS5B,IACX,KAGVI,EAAAA,EAAAA,KAACgB,EAAAA,GAAU,CACPC,KAAM,WACNxB,QAASA,EACTyB,OAAQ,SAAAO,GAAA,IAAEL,EAAKK,EAALL,MAAK,OACXpB,EAAAA,EAAAA,KAACqB,EAAAA,GAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACFC,YAAa,YACTH,GAAK,IACTI,QAAS5B,IACX,KAGVI,EAAAA,EAAAA,KAACgB,EAAAA,GAAU,CACPC,KAAK,aACLxB,QAASA,EAETyB,OAAQ,SAAAQ,GAAA,IAAEN,EAAKM,EAALN,MAAK,OACXpB,EAAAA,EAAAA,KAAC2B,EAAAA,GAAQL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDF,GAAK,IAAAL,SACZ,gBAEU,KAGnBf,EAAAA,EAAAA,KAAA,OAAAe,SAEQnC,GACMsB,EAAAA,EAAAA,MAAA,OAAK0B,UAAWC,EAAUd,SAAA,EACxBf,EAAAA,EAAAA,KAAA,OAAK8B,IAAKlD,EAASmD,IAAI,aACvB/B,EAAAA,EAAAA,KAAA,SAAAsB,EAAAA,EAAAA,GAAA,CACIU,KAAK,QACD5C,EAAS,UACT,CAAC6C,UAAU,UAErBjC,EAAAA,EAAAA,KAAAkC,EAAAA,SAAA,OAGdlC,EAAAA,EAAAA,KAAA,OAAAe,UACIf,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,CACHH,KAAK,UACLI,SAAS,SACThC,MAAO,CAACiC,MAAO,QAAQtB,SAC1B,aAILf,EAAAA,EAAAA,KAAA,OAAAe,SAEc,OAANrB,QAAM,IAANA,GAAsB,QAAhBhB,EAANgB,EAAQG,sBAAc,IAAAnB,GAAtBA,EAAwBoB,SAClBE,EAAAA,EAAAA,KAAA,KAAGI,MAAO,CAACkC,MAAO,OAAOvB,SAAErB,EAAOG,eAAeC,WACjDE,EAAAA,EAAAA,KAAA,OAAK4B,UAAWC,QAK1C,EA8BA,GAAeU,EAAAA,EAAAA,KALO,SAACC,GAAmB,MAAsB,CACxDC,KAAMD,EAAMC,KACf,GAGwF,CAAC9D,MAAAA,EAAAA,IAA9F,EAlB6C,SAAH+D,GAAuB,IAAlBD,EAAIC,EAAJD,KAAM9D,EAAK+D,EAAL/D,MACjD,OAAOqB,EAAAA,EAAAA,KAAAkC,EAAAA,SAAA,CAAAnB,SAEE0B,EAAKE,QAKA3C,EAAAA,EAAAA,KAACa,EAAAA,GAAQ,CAACC,GAAG,cAJbZ,EAAAA,EAAAA,MAAA,OAAK0B,UAAWC,EAAed,SAAA,EAC7Bf,EAAAA,EAAAA,KAAC1B,EAAK,CAACsE,MAAO,EAAE7B,SAAC,WACjBf,EAAAA,EAAAA,KAACxB,EAAS,CAACG,MAAOA,EAAOC,QAAS6D,EAAK7D,QAASC,WAAY4D,EAAK5D,iBAKrF,G","sources":["webpack://gsn/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"logFormInput\":\"Login_logFormInput__YmWHv\",\"logForm\":\"Login_logForm__-5Xrv\",\"logInput\":\"Login_logInput__toAZI\",\"rememberMe\":\"Login_rememberMe__pzUev\",\"submit\":\"Login_submit__cSdEP\",\"logOutBtn\":\"Login_logOutBtn__R0zIa\",\"errorEmptyString\":\"Login_errorEmptyString__JGP-K\",\"captcha\":\"Login_captcha__+56Kx\"};","import {useForm, UseFormSetError, Controller} from \"react-hook-form\"\nimport type {SubmitHandler} from \"react-hook-form\"\nimport {InitialAuthStateType, logIn} from \"../../redux/auth-reducer\"\nimport {connect} from \"react-redux\"\nimport s from \"./Login.module.css\"\nimport {ErrorBorderOutline} from \"../common/FormsControls/Errors\"\nimport * as React from \"react\"\nimport {Navigate} from \"react-router-dom\"\nimport {FC} from \"react\"\nimport {AppStateType} from \"../../redux/redux-store\"\nimport Preloader from \"../common/Preloader/Preloader\"\nimport {Button, Checkbox, Form, Input} from \"antd\"\nimport {Typography} from \"antd\"\n\nconst {Title} = Typography\n\nexport type FormValues = {\n    serverResponse?: string[]\n    email: string\n    password: string\n    captcha: string\n    rememberMe: boolean\n}\n\ntype LoginFormPropsType = {\n    captcha: string\n    isFetching: boolean\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\n}\n\nconst LoginForm: FC<LoginFormPropsType> = ({logIn, captcha, isFetching}) => {\n    const {\n        register,\n        handleSubmit,\n        reset,\n        setError,\n        clearErrors,\n        control,\n        formState: {\n            errors\n        }\n    } = useForm<FormValues>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n            captcha: \"\",\n            rememberMe: false\n        }\n    })\n\n    const onSubmit: SubmitHandler<FormValues> = (formData) => {\n        console.log(formData)\n        logIn(formData, setError)\n        reset()\n        return <Navigate to=\"/profile/\"/>\n    }\n\n    const clearErrorsForm = () => {\n        if (errors && errors.serverResponse && errors.serverResponse.message!.length > 0) {\n            clearErrors(\"serverResponse\")\n        }\n    }\n\n    if (isFetching) return <Preloader/>\n\n    return (\n        <Form\n            style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                gap: \"16px\",\n                textAlign: \"center\"\n            }}\n            onFinish={handleSubmit(onSubmit)}>\n            <Controller\n                name={\"email\"}\n                control={control}\n                render={({field}) =>\n                    <Input\n                        placeholder={\"Email\"}\n                        {...field}\n                        onFocus={clearErrorsForm}\n                    />\n                }\n            />\n            <Controller\n                name={\"password\"}\n                control={control}\n                render={({field}) =>\n                    <Input\n                        placeholder={\"Password\"}\n                        {...field}\n                        onFocus={clearErrorsForm}\n                    />\n                }\n            />\n            <Controller\n                name=\"rememberMe\"\n                control={control}\n\n                render={({field}) =>\n                    <Checkbox\n                        {...field}\n                    >\n                        Remember Me\n                    </Checkbox>\n                }\n            />\n            <div>\n                {\n                    captcha\n                        ? <div className={s.captcha}>\n                            <img src={captcha} alt=\"captcha\"/>\n                            <input\n                                type=\"text\"\n                                {...register(\"captcha\",\n                                    {required: true})}/>\n                        </div>\n                        : <></>\n                }\n            </div>\n            <div>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    style={{width: \"100%\"}}\n                >\n                    Login\n                </Button>\n            </div>\n            <div>\n                {\n                    errors?.serverResponse?.message\n                        ? <p style={{color: \"red\"}}>{errors.serverResponse.message}</p>\n                        : <div className={s.errorEmptyString}/>\n                }\n            </div>\n        </Form>\n    )\n}\n\ntype LoginPropsType = {\n    auth: InitialAuthStateType\n}\n\ntype LoginDispatchType = {\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\n}\n\ntype LoginPropsAndDispatchType = LoginPropsType & LoginDispatchType\n\nconst Login: FC<LoginPropsAndDispatchType> = ({auth, logIn}) => {\n    return <>\n        {\n            !auth.isAuth\n                ? <div className={s.logFormInput}>\n                    <Title level={4}>LOGIN</Title>\n                    <LoginForm logIn={logIn} captcha={auth.captcha} isFetching={auth.isFetching}/>\n                </div>\n                : <Navigate to=\"/profile\"/>\n        }\n    </>\n}\n\nlet mapStateToProps = (state: AppStateType): LoginPropsType => ({\n        auth: state.auth\n    }\n)\n\nexport default connect<LoginPropsType, LoginDispatchType, {}, AppStateType>(mapStateToProps, {logIn})(Login)"],"names":["Title","Typography","LoginForm","_ref","_errors$serverRespons","logIn","captcha","isFetching","_useForm","useForm","defaultValues","email","password","rememberMe","register","handleSubmit","reset","setError","clearErrors","control","errors","formState","clearErrorsForm","serverResponse","message","length","_jsx","Preloader","_jsxs","Form","style","display","flexDirection","gap","textAlign","onFinish","formData","console","log","Navigate","to","children","Controller","name","render","_ref2","field","Input","_objectSpread","placeholder","onFocus","_ref3","_ref4","Checkbox","className","s","src","alt","type","required","_Fragment","Button","htmlType","width","color","connect","state","auth","_ref5","isAuth","level"],"sourceRoot":""}