{"version":3,"file":"static/js/10.bb5a1d4f.chunk.js","mappings":"2IACA,OAAgB,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,cAAgB,+BAA+B,KAAO,sBAAsB,eAAiB,gCAAgC,kBAAoB,mCAAmC,iBAAmB,kCAAkC,aAAe,8BAA8B,aAAe,8BAA8B,eAAiB,gCAAgC,MAAQ,wB,mBCqBjgB,EAVqC,SAACA,GAClC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEC,QAASC,MAAO,CAC9BC,UAAoC,MAAzBN,EAAMI,QAAQG,OAAiB,QAAU,QACtDC,SACGR,EAAMI,QAAQA,SAG3B,E,UCCA,EAVwC,SAACJ,GACrC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEM,cAAcD,UAC5BE,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,YAAcZ,EAAMa,GAAIR,MAAO,SAAAS,GAAU,MAAO,CACzDC,MADkDD,EAARE,SACxB,UAAY,QACjC,EAAER,SAAA,EAACP,EAAAA,EAAAA,KAAA,OAAKgB,IAAKjB,EAAMkB,IAAKC,IAAI,SAAOlB,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEiB,KAAKZ,SAAER,EAAMqB,WAG/E,E,wCCdaC,EAAc,SAACtB,GACxB,MAAO,CACHuB,OAAsC,IAA9BC,OAAOC,KAAKzB,GAAO0B,OACrB,gBACA,GAEd,ECsCMC,EAA+C,SAAC3B,GAAW,IAAD4B,EAC5DC,GAKIC,EAAAA,EAAAA,MAJAC,EAAQF,EAARE,SACAC,EAAYH,EAAZG,aACAC,EAAKJ,EAALI,MACYC,EAAML,EAAlBM,UAAYD,OAUhB,OACIxB,EAAAA,EAAAA,MAAA,QACI0B,SAAUJ,GAT0B,SAACK,GACzCrC,EAAMsC,kBAAkBD,EAAOjC,QAASJ,EAAMuC,gBAC9CN,GACJ,IAMyCzB,SAAA,EACjCP,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEqC,MAAMhC,UACb,OAAN0B,QAAM,IAANA,OAAM,EAANA,EAAQ9B,WACLH,EAAAA,EAAAA,KAAA,KAAAO,SAAU,OAAN0B,QAAM,IAANA,GAAe,QAATN,EAANM,EAAQ9B,eAAO,IAAAwB,OAAT,EAANA,EAAiBxB,aAG7BM,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAEsC,iBAAiBjC,SAAA,EAC/BP,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEuC,aAAalC,UAC3BP,EAAAA,EAAAA,KAAA,SAAA0C,EAAAA,EAAAA,GAAA,CACIC,KAAK,WACLC,YAAY,sBACZxC,MAAOiB,EAAYY,IACfH,EAAS,UACT,CACIe,UAAU,EACVC,UAAW,CACPC,MApBF,GAqBE5C,QAAQ,cAAD6C,OArBT,GAqB8C,oBAIhEhD,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAE+C,eAAe1C,UAC7BP,EAAAA,EAAAA,KAAA,SAAO2C,KAAM,kBAKjC,EAEA,EAlFqC,SAAC5C,GAGlC,IAAImD,EAAUC,EAAAA,GAAAA,QAEVC,GAAYC,EAAAA,EAAAA,QAA8B,MAK9C,OACI5C,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAEoD,QAAQ/C,SAAA,EACtBP,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAEqD,aAAahD,SAC1BR,EAAMyD,mBAEX/C,EAAAA,EAAAA,MAAA,OAAKR,UAAWC,EAAEuD,SAASlD,SAAA,EACvBE,EAAAA,EAAAA,MAACyC,EAAO,CACJjD,UAAWC,EAAEwD,eAAenD,SAAA,CAC3BR,EAAM4D,kBACP3D,EAAAA,EAAAA,KAAA,OAAK4D,IAAKR,EAAWnD,UAAWC,EAAE2D,wBAEtC7D,EAAAA,EAAAA,KAAC0B,EAAc,CACXW,kBAAmBtC,EAAMsC,kBAAmBC,eAhBrC,WAAO,IAADwB,EACR,QAAjBA,EAAAV,EAAUW,eAAO,IAAAD,GAAjBA,EAAmBE,eAAe,CAACC,SAAU,UACjD,SAkBJ,E,mBCNA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KApBoB,SAACC,GACrB,MAAO,CACHZ,gBAAiBY,EAAMC,YAAYf,QAAQgB,KAAI,SAAAC,GAAC,OAAIvE,EAAAA,EAAAA,KAACwE,EAAU,CAACvD,IAAKsD,EAAEtD,IAAKG,KAAMmD,EAAEnD,KAAMR,GAAI2D,EAAE3D,IAAS2D,EAAE3D,GAAK,IAChH+C,iBAAkBS,EAAMC,YAAYf,QAAQ,GAAGG,SAASa,KAAI,SAAAG,GAAC,OAAIzE,EAAAA,EAAAA,KAAC0E,EAAO,CAACvE,QAASsE,GAAQA,EAAE7D,GAAK,IAE1G,IAK2B,SAAC+D,GACxB,MAAO,CACHtC,kBAAmB,SAAClC,EAASmC,GACzBqC,GAASC,EAAAA,EAAAA,GAA+BzE,IACxCmC,GACJ,EAER,IAIIuC,EAAAA,EAFJ,CAEsBC,E","sources":["webpack://gsn/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/common/FormsControls/Errors.ts","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ci1BS\",\"dialogsItems\":\"Dialogs_dialogsItems__7N9S+\",\"messages\":\"Dialogs_messages__4SseP\",\"dialogElement\":\"Dialogs_dialogElement__uVN8I\",\"text\":\"Dialogs_text__b-CIC\",\"messagesScroll\":\"Dialogs_messagesScroll__z3EBF\",\"messagesScrollRef\":\"Dialogs_messagesScrollRef__070ZE\",\"sendMessageField\":\"Dialogs_sendMessageField__5BnpH\",\"messagesForm\":\"Dialogs_messagesForm__4C+yb\",\"messageField\":\"Dialogs_messageField__isYgp\",\"btnMessageSend\":\"Dialogs_btnMessageSend__INqUo\",\"error\":\"Dialogs_error__EWosx\"};","import s from \"./../Dialogs.module.css\"\nimport * as React from \"react\"\n\ntype MessageType = {\n    sender: string\n    message: string\n}\n\ntype PropsType = {\n    message: MessageType\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.message} style={{\n            textAlign: props.message.sender === \"u\" ? 'right' : 'left'\n        }}>\n            {props.message.message}\n        </div>\n    )\n}\n\nexport default Message\n","import s from \"./../Dialogs.module.css\"\nimport {NavLink} from \"react-router-dom\"\nimport * as React from \"react\"\n\ntype PropsType = {\n    ava: string\n    name: string\n    id: number\n    key: number\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    return (\n        <div className={s.dialogElement}>\n            <NavLink to={\"/dialogs/\" + props.id} style={({isActive}) => ({\n                color: isActive ? '#66d801' : 'black'\n            })}><img src={props.ava} alt=\"ava\"/><div className={s.text}>{props.name}</div></NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem\n","type ReturnedValueType = {\n    border?: string\n    outline?: string\n}\n\nexport const ErrorBorder = (props: any): ReturnedValueType => {\n    return {\n        border: Object.keys(props).length !== 0\n            ? '1px solid red'\n            : ''\n    }\n}\n\nexport const ErrorBorderOutline = (props: any): ReturnedValueType => {\n    return {\n        outline: Object.keys(props).length !== 0\n            ? '1px solid red'\n            : ''\n    }\n}","import s from \"./Dialogs.module.css\"\nimport * as React from \"react\"\nimport {useRef} from \"react\"\nimport Scroll from \"react-scroll\"\nimport {SubmitHandler, useForm} from \"react-hook-form\"\nimport {ErrorBorder} from \"../common/FormsControls/Errors\"\n\ntype PropsType = {\n    dialogsElements: any\n    messagesElements: any\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n\n    // Автоскролл вниз после отправки сообщения\n    let Element = Scroll.Element\n\n    let scrollRef = useRef<null | HTMLDivElement>(null)\n    const scrollToBottom = () => {\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {props.dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <Element\n                    className={s.messagesScroll}>\n                    {props.messagesElements}\n                    <div ref={scrollRef} className={s.messagesScrollRef}/>\n                </Element>\n                <AddMessageForm\n                    messageSendButton={props.messageSendButton} scrollToBottom={scrollToBottom}/>\n            </div>\n        </div>\n    )\n}\n\ntype FormValues = {\n    message: string\n}\ntype AddMessageFormType = {\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\n    scrollToBottom: () => void\n}\n\nconst AddMessageForm: React.FC<AddMessageFormType> = (props) => {\n    const {\n        register,\n        handleSubmit,\n        reset,\n        formState: {errors}\n    } = useForm<FormValues>()\n\n    const onSubmit: SubmitHandler<FormValues> = (values) => {\n        props.messageSendButton(values.message, props.scrollToBottom)\n        reset()\n    }\n\n    const maxMessageLengthValue = 20\n\n    return (\n        <form\n            onSubmit={handleSubmit(onSubmit)}>\n            <div className={s.error}>\n                {errors?.message &&\n                    <p>{errors?.message?.message}</p>\n                }\n            </div>\n            <div className={s.sendMessageField}>\n                <div className={s.messageField}>\n                    <input\n                        type=\"textarea\"\n                        placeholder=\"Enter a new message\"\n                        style={ErrorBorder(errors)}\n                        {...register(\"message\",\n                            {\n                                required: true,\n                                maxLength: {\n                                    value: maxMessageLengthValue,\n                                    message: `Max length ${maxMessageLengthValue} symbols`\n                                }\n                            })}/>\n                </div>\n                <div className={s.btnMessageSend}>\n                    <input type={\"submit\"}/>\n                </div>\n            </div>\n        </form>\n    )\n}\n\nexport default Dialogs\n","import Message from \"./Message/Message\"\nimport DialogItem from \"./DialogItem/DialogItem\"\nimport {messageSendButtonActionCreator} from \"../../redux/dialogs-reducer\"\nimport Dialogs from \"./Dialogs\"\nimport {connect} from \"react-redux\"\nimport * as React from \"react\"\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\nimport {compose} from \"redux\"\nimport {AppStateType} from \"../../redux/redux-store\"\n\ntype MapStateToPropsType = {\n    dialogsElements: any\n    messagesElements: any\n}\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n    return {\n        dialogsElements: state.dialogsPage.dialogs.map(d => <DialogItem ava={d.ava} name={d.name} id={d.id} key={d.id}/>),\n        messagesElements: state.dialogsPage.dialogs[0].messages.map(m => <Message message={m} key={m.id}/>)\n    }\n}\n\ntype MapDispatchToPropsType = {\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\n}\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\n    return {\n        messageSendButton: (message, scrollToBottom) => {\n            dispatch(messageSendButtonActionCreator(message))\n            scrollToBottom()\n        }\n    }\n}\n\nexport default compose<React.Component>(\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)(Dialogs)\n"],"names":["props","_jsx","className","s","message","style","textAlign","sender","children","dialogElement","_jsxs","NavLink","to","id","_ref","color","isActive","src","ava","alt","text","name","ErrorBorder","border","Object","keys","length","AddMessageForm","_errors$message","_useForm","useForm","register","handleSubmit","reset","errors","formState","onSubmit","values","messageSendButton","scrollToBottom","error","sendMessageField","messageField","_objectSpread","type","placeholder","required","maxLength","value","concat","btnMessageSend","Element","Scroll","scrollRef","useRef","dialogs","dialogsItems","dialogsElements","messages","messagesScroll","messagesElements","ref","messagesScrollRef","_scrollRef$current","current","scrollIntoView","behavior","compose","connect","state","dialogsPage","map","d","DialogItem","m","Message","dispatch","messageSendButtonActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}