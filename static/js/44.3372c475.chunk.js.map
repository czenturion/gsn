{"version":3,"file":"static/js/44.3372c475.chunk.js","mappings":"sLACA,EAA+B,4BAA/B,EAAqE,uBAArE,EAAuG,wBAAvG,EAA4I,0BAA5I,EAA+K,sBAA/K,EAA6P,gCAA7P,EAAuS,uB,iDCyBjSA,EAAoC,SAAC,GAAkC,IAAD,EAAhCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WACxD,GASIC,EAAAA,EAAAA,MARAC,EADJ,EACIA,SACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,MACAC,EAJJ,EAIIA,SACAC,EALJ,EAKIA,YAEIC,EAPR,EAMIC,UACID,OAUFE,EAAkB,WAChBF,GAAUA,EAAOG,gBAAkBH,EAAOG,eAAeC,QAASC,OAAS,GAC3EN,EAAY,mBAIpB,OAAIN,GAAmB,SAACa,EAAA,EAAD,KAGnB,kBACIC,UAAWC,EACXC,SAAUb,GAjB0B,SAACc,GAGzC,OAFAnB,EAAMmB,EAAUZ,GAChBD,KACO,SAAC,KAAD,CAAUc,GAAG,iBAYpB,WAGI,0BACI,kCACIJ,UAAWC,EACXI,OAAa,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQa,SAASC,EAAAA,EAAAA,GAAmBd,IACvCL,EACA,QACA,CACIoB,UAAU,EACVC,SAAUd,KAPtB,IASIe,YAAa,cAErB,0BACI,kCACIV,UAAWC,EACXI,OAAa,OAANZ,QAAM,IAANA,OAAA,EAAAA,EAAQkB,YAAYJ,EAAAA,EAAAA,GAAmBd,IAC1CL,EACA,WACA,CACIoB,UAAU,EACVC,SAAUd,KAPtB,IASIe,YAAa,WACbE,KAAM,iBAEd,iBAAKZ,UAAWC,EAAhB,WACI,oCACQb,EAAS,eADjB,IAEIwB,KAAM,eACV,2CAEJ,yBAEQ3B,GACM,iBAAKe,UAAWC,EAAhB,WACE,gBAAKY,IAAK5B,EAAS6B,IAAI,aACvB,0BACIF,KAAK,QACDxB,EAAS,UACT,CAACoB,UAAU,UAErB,2BAGd,0BACI,kBACIR,UAAWC,EACXW,KAAM,cAEd,yBAEc,OAANnB,QAAM,IAANA,GAAA,UAAAA,EAAQG,sBAAR,SAAwBC,SAClB,cAAGQ,MAAO,CAACU,MAAO,OAAlB,SAA2BtB,EAAOG,eAAeC,WACjD,gBAAKG,UAAWC,UAmC1C,GAAee,EAAAA,EAAAA,KALO,SAACC,GAAD,MAA0C,CACxDC,KAAMD,EAAMC,QAIyE,CAAClC,MAAAA,EAAAA,IAA9F,EAlB6C,SAAC,GAAmB,IAAlBkC,EAAiB,EAAjBA,KAAMlC,EAAW,EAAXA,MACjD,OAAO,8BAEEkC,EAAKC,QAKA,SAAC,KAAD,CAAUf,GAAG,cAJb,iBAAKJ,UAAWC,EAAhB,WACE,mCACA,SAAClB,EAAD,CAAWC,MAAOA,EAAOC,QAASiC,EAAKjC,QAASC,WAAYgC,EAAKhC,sB,4EC/H9E,IAAMkC,EAAc,SAACC,GACxB,MAAO,CACHC,OAAsC,IAA9BC,OAAOC,KAAKH,GAAOvB,OACrB,gBACA,KAIDS,EAAqB,SAACc,GAC/B,MAAO,CACHI,QAAuC,IAA9BF,OAAOC,KAAKH,GAAOvB,OACtB,gBACA","sources":["webpack://gsn/./src/components/Login/Login.module.css?3530","components/Login/Login.tsx","components/common/FormsControls/Errors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"logFormInput\":\"Login_logFormInput__C3Wuk\",\"logForm\":\"Login_logForm__msPM6\",\"logInput\":\"Login_logInput__AcNK8\",\"rememberMe\":\"Login_rememberMe__vVadN\",\"submit\":\"Login_submit__iGISv\",\"logOutBtn\":\"Login_logOutBtn__MXB1-\",\"errorEmptyString\":\"Login_errorEmptyString__3IbQy\",\"captcha\":\"Login_captcha__d1h4L\"};","import {useForm, UseFormSetError} from \"react-hook-form\"\r\nimport type {SubmitHandler} from \"react-hook-form\"\r\nimport {InitialAuthStateType, logIn} from \"../../redux/auth-reducer\"\r\nimport {connect} from \"react-redux\"\r\nimport s from \"./Login.module.css\"\r\nimport {ErrorBorderOutline} from \"../common/FormsControls/Errors\"\r\nimport * as React from \"react\"\r\nimport {Navigate} from \"react-router-dom\"\r\nimport {FC} from \"react\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\nimport Preloader from \"../common/Preloader/Preloader\"\r\n\r\ntype FormValues = {\r\n    serverResponse?: string[]\r\n    email: string\r\n    password: string\r\n    captcha: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype LoginFormPropsType = {\r\n    captcha: string\r\n    isFetching: boolean\r\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\r\n}\r\n\r\nconst LoginForm: FC<LoginFormPropsType> = ({logIn, captcha, isFetching}) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        setError,\r\n        clearErrors,\r\n        formState: {\r\n            errors\r\n        }\r\n    } = useForm<FormValues>()\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = (formData) => {\r\n        logIn(formData, setError)\r\n        reset()\r\n        return <Navigate to=\"/profile/\"/>\r\n    }\r\n\r\n    const clearErrorsForm = () => {\r\n        if (errors && errors.serverResponse && errors.serverResponse.message!.length > 0) {\r\n            clearErrors(\"serverResponse\")\r\n        }\r\n    }\r\n\r\n    if (isFetching) return <Preloader/>\r\n\r\n    return (\r\n        <form\r\n            className={s.logForm}\r\n            onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                <input\r\n                    className={s.logInput}\r\n                    style={errors?.email && ErrorBorderOutline(errors)}\r\n                    {...register(\r\n                        \"email\",\r\n                        {\r\n                            required: true,\r\n                            onChange: clearErrorsForm\r\n                        })}\r\n                    placeholder={\"Email\"}/>\r\n            </div>\r\n            <div>\r\n                <input\r\n                    className={s.logInput}\r\n                    style={errors?.password && ErrorBorderOutline(errors)}\r\n                    {...register(\r\n                        \"password\",\r\n                        {\r\n                            required: true,\r\n                            onChange: clearErrorsForm\r\n                        })}\r\n                    placeholder={\"Password\"}\r\n                    type={\"password\"}/>\r\n            </div>\r\n            <div className={s.rememberMe}>\r\n                <input\r\n                    {...register(\"rememberMe\")}\r\n                    type={\"checkbox\"}/>\r\n                <p>Remember me</p>\r\n            </div>\r\n            <div>\r\n                {\r\n                    captcha\r\n                        ? <div className={s.captcha}>\r\n                            <img src={captcha} alt=\"captcha\"/>\r\n                            <input\r\n                                type=\"text\"\r\n                                {...register(\"captcha\",\r\n                                    {required: true})}/>\r\n                        </div>\r\n                        : <></>\r\n                }\r\n            </div>\r\n            <div>\r\n                <input\r\n                    className={s.submit}\r\n                    type={\"submit\"}/>\r\n            </div>\r\n            <div>\r\n                {\r\n                    errors?.serverResponse?.message\r\n                        ? <p style={{color: \"red\"}}>{errors.serverResponse.message}</p>\r\n                        : <div className={s.errorEmptyString}/>\r\n                }\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype LoginPropsType = {\r\n    auth: InitialAuthStateType\r\n}\r\n\r\ntype LoginDispatchType = {\r\n    logIn: (formData: FormValues, setError: UseFormSetError<FormValues>) => void\r\n}\r\n\r\ntype LoginPropsAndDispatchType = LoginPropsType & LoginDispatchType\r\n\r\nconst Login: FC<LoginPropsAndDispatchType> = ({auth, logIn}) => {\r\n    return <>\r\n        {\r\n            !auth.isAuth\r\n                ? <div className={s.logFormInput}>\r\n                    <h1>LOGIN</h1>\r\n                    <LoginForm logIn={logIn} captcha={auth.captcha} isFetching={auth.isFetching}/>\r\n                </div>\r\n                : <Navigate to=\"/profile\"/>\r\n        }\r\n    </>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): LoginPropsType => ({\r\n        auth: state.auth\r\n    }\r\n)\r\n\r\nexport default connect<LoginPropsType, LoginDispatchType, {}, AppStateType>(mapStateToProps, {logIn})(Login)","type ReturnedValueType = {\r\n    border?: string\r\n    outline?: string\r\n}\r\n\r\nexport const ErrorBorder = (props: any): ReturnedValueType => {\r\n    return {\r\n        border: Object.keys(props).length !== 0\r\n            ? '1px solid red'\r\n            : ''\r\n    }\r\n}\r\n\r\nexport const ErrorBorderOutline = (props: any): ReturnedValueType => {\r\n    return {\r\n        outline: Object.keys(props).length !== 0\r\n            ? '1px solid red'\r\n            : ''\r\n    }\r\n}"],"names":["LoginForm","logIn","captcha","isFetching","useForm","register","handleSubmit","reset","setError","clearErrors","errors","formState","clearErrorsForm","serverResponse","message","length","Preloader","className","s","onSubmit","formData","to","style","email","ErrorBorderOutline","required","onChange","placeholder","password","type","src","alt","color","connect","state","auth","isAuth","ErrorBorder","props","border","Object","keys","outline"],"sourceRoot":""}