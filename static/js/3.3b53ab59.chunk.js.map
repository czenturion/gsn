{"version":3,"file":"static/js/3.3b53ab59.chunk.js","mappings":"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","sources":["webpack://gsn/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/Errors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__OS6VW\",\"dialogsItems\":\"Dialogs_dialogsItems__tVTde\",\"messages\":\"Dialogs_messages__sshPE\",\"dialogElement\":\"Dialogs_dialogElement__BCeLk\",\"text\":\"Dialogs_text__eyEjq\",\"messagesScroll\":\"Dialogs_messagesScroll__r8s-i\",\"messagesScrollRef\":\"Dialogs_messagesScrollRef__bBenW\",\"sendMessageField\":\"Dialogs_sendMessageField__PzEfo\",\"messagesForm\":\"Dialogs_messagesForm__TAfDf\",\"messageField\":\"Dialogs_messageField__lpnSO\",\"btnMessageSend\":\"Dialogs_btnMessageSend__eK3kr\",\"error\":\"Dialogs_error__YYsX9\"};","import s from \"./../Dialogs.module.css\"\r\nimport * as React from \"react\"\r\n\r\ntype MessageType = {\r\n    sender: string\r\n    message: string\r\n}\r\n\r\ntype PropsType = {\r\n    message: MessageType\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message} style={{\r\n            textAlign: props.message.sender === \"u\" ? 'right' : 'left'\r\n        }}>\r\n            {props.message.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import s from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport * as React from \"react\"\r\n\r\ntype PropsType = {\r\n    ava: string\r\n    name: string\r\n    id: number\r\n    key: number\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialogElement}>\r\n            <NavLink to={\"/dialogs/\" + props.id} style={({isActive}) => ({\r\n                color: isActive ? '#66d801' : 'black'\r\n            })}><img src={props.ava} alt=\"ava\"/><div className={s.text}>{props.name}</div></NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import s from \"./Dialogs.module.css\"\r\nimport * as React from \"react\"\r\nimport {useRef} from \"react\"\r\nimport Scroll from \"react-scroll\"\r\nimport {SubmitHandler, useForm} from \"react-hook-form\"\r\nimport {ErrorBorder} from \"../common/FormsControls/Errors\"\r\n\r\ntype PropsType = {\r\n    dialogsElements: any\r\n    messagesElements: any\r\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    // Автоскролл вниз после отправки сообщения\r\n    let Element = Scroll.Element\r\n\r\n    let scrollRef = useRef<null | HTMLDivElement>(null)\r\n    const scrollToBottom = () => {\r\n        scrollRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {props.dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <Element\r\n                    className={s.messagesScroll}>\r\n                    {props.messagesElements}\r\n                    <div ref={scrollRef} className={s.messagesScrollRef}/>\r\n                </Element>\r\n                <AddMessageForm\r\n                    messageSendButton={props.messageSendButton} scrollToBottom={scrollToBottom}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormValues = {\r\n    message: string\r\n}\r\ntype AddMessageFormType = {\r\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\r\n    scrollToBottom: () => void\r\n}\r\n\r\nconst AddMessageForm: React.FC<AddMessageFormType> = (props) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        reset,\r\n        formState: {errors}\r\n    } = useForm<FormValues>()\r\n\r\n    const onSubmit: SubmitHandler<FormValues> = (values) => {\r\n        props.messageSendButton(values.message, props.scrollToBottom)\r\n        reset()\r\n    }\r\n\r\n    const maxMessageLengthValue = 20\r\n\r\n    return (\r\n        <form\r\n            onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={s.error}>\r\n                {errors?.message &&\r\n                    <p>{errors?.message?.message}</p>\r\n                }\r\n            </div>\r\n            <div className={s.sendMessageField}>\r\n                <div className={s.messageField}>\r\n                    <input\r\n                        type=\"textarea\"\r\n                        placeholder=\"Enter a new message\"\r\n                        style={ErrorBorder(errors)}\r\n                        {...register(\"message\",\r\n                            {\r\n                                required: true,\r\n                                maxLength: {\r\n                                    value: maxMessageLengthValue,\r\n                                    message: `Max length ${maxMessageLengthValue} symbols`\r\n                                }\r\n                            })}/>\r\n                </div>\r\n                <div className={s.btnMessageSend}>\r\n                    <input type={\"submit\"}/>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n","import Message from \"./Message/Message\"\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport {messageSendButtonActionCreator} from \"../../redux/dialogs-reducer\"\r\nimport Dialogs from \"./Dialogs\"\r\nimport {connect} from \"react-redux\"\r\nimport * as React from \"react\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\"\r\nimport {compose} from \"redux\"\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsElements: any\r\n    messagesElements: any\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsElements: state.dialogsPage.dialogs.map(d => <DialogItem ava={d.ava} name={d.name} id={d.id} key={d.id}/>),\r\n        messagesElements: state.dialogsPage.dialogs[0].messages.map(m => <Message message={m} key={m.id}/>)\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    messageSendButton: (message: string, scrollToBottom: () => void) => void\r\n}\r\nconst mapDispatchToProps = (dispatch: any): MapDispatchToPropsType => {\r\n    return {\r\n        messageSendButton: (message, scrollToBottom) => {\r\n            dispatch(messageSendButtonActionCreator(message))\r\n            scrollToBottom()\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.Component>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs)\r\n","type ReturnedValueType = {\r\n    border?: string\r\n    outline?: string\r\n}\r\n\r\nexport const ErrorBorder = (props: any): ReturnedValueType => {\r\n    return {\r\n        border: Object.keys(props).length !== 0\r\n            ? '1px solid red'\r\n            : ''\r\n    }\r\n}\r\n\r\nexport const ErrorBorderOutline = (props: any): ReturnedValueType => {\r\n    return {\r\n        outline: Object.keys(props).length !== 0\r\n            ? '1px solid red'\r\n            : ''\r\n    }\r\n}"],"names":["props","className","s","style","textAlign","message","sender","to","id","color","isActive","src","ava","alt","name","AddMessageForm","useForm","register","handleSubmit","reset","errors","formState","onSubmit","values","messageSendButton","scrollToBottom","type","placeholder","ErrorBorder","required","maxLength","value","Element","Scroll","scrollRef","useRef","dialogsElements","messagesElements","ref","current","scrollIntoView","behavior","compose","connect","state","dialogsPage","dialogs","map","d","messages","m","dispatch","messageSendButtonActionCreator","withAuthRedirect","Dialogs","border","Object","keys","length","ErrorBorderOutline","outline"],"sourceRoot":""}